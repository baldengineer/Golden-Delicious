; The MIT License (MIT)
; 
; Copyright (c) 2021 James Lewis
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in
; all copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
; THE SOFTWARE.

.program KBD
.side_set 1 opt

; output pins (9 total)
; gpio 4-12 (d7-d0, en_245)

; input pins
.define KSEL0 3
.define KSEL1 18
.define KSEL2 19
.define RW 20
.define PH0 21
; 22: 
; 23: 
; 24:
; 25:

; used to store/repeat last key press
mov x, null             ; fallback char if TX FIFO is empty
mov y, null             ; will store last decoded characters

; make sure the data bus is set to output
mov osr, ~ null         ; load FFs into OSR (for change to output)
out pindirs, 8 side 1   ; shift 8 FFs into pin direction register from OSR
                        ; and disable data buffer
.wrap_target 
start:
    nop side 1           ; disable output buffer
    wait 0 gpio KSEL2    ; KSEL2 and
    wait 0 gpio KSEL1   ; KSEL1 both seem to do the same thing
    ; is this a C000 or C010? KSEL0 is the key
  ;  in PINS, 1          ; get KSEL0 from the input pins (bottom bit)
  ;  mov X, ISR          ; move to x for comparison
    set X, 1
    jmp X--, valid_cyc  ; KSEL0 is HIGH, so C010   
    ; this is C000, can only respond to a READ
    jmp PIN, valid_cyc  ; R/W pin, jumps if HIGH (Read)
    jmp start           ; if R/W low, this is a C000 call which is for 80col card

valid_cyc:
    pull noblock        ; if FIFO empty, MOV OSR, X happens
    mov x, osr          ; check if there is a new character
    jmp !x output       ; a zero means no new character
    mov y, x            ; mmmm fresh char, save for next iteration
    jmp one_time_out

output:
    mov osr, y          ; repeat previous character nothing new in FIFO

one_time_out:
    wait 1 gpio PH0     ; wait for Data Cycle
    out pins, 8   ; output keyboard value (7 data 1 strobe) from OSR 
    nop side 0
    ; was this C010 (or C000)?
  ;  in PINS, 1           ; get KSEL0 from input PINS (bottom bit)
    mov X, ISR           ; move to x for comparison
    jmp X--, c010        ; KSEL0 is HIGH, so C010 (dk about the decrement)
    jmp c000             ; if low then C000

c010:
; since it is a C010 we need to strip off the strobe bit
; ******************
; * but key to remember is that the data word is swizzled
; * Strobe is MD7 on the bus, but it is bit 0 in the Y register / FIFO!
; ******************
;    set PINS, 0 ; ONLY sets MD7 to 0 (because of the set_set in the config)
;    in y, 8     ; move 8 bits of PINS into y for later use

c000:
    mov X, null         ; reset x for next iteration
past_c010:
    wait 0 gpio PH0     ; wait for data phase to end
;    nop side 1          ; turn off 245 buffer [made side on wait at start of loop]
.wrap          